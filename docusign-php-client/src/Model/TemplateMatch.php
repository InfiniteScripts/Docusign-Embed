<?php
/**
 * TemplateMatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;

/**
 * TemplateMatch Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateMatch implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'templateMatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_end_page' => 'string',
        'document_start_page' => 'string',
        'match_percentage' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'document_end_page' => 'documentEndPage',
        'document_start_page' => 'documentStartPage',
        'match_percentage' => 'matchPercentage'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'document_end_page' => 'setDocumentEndPage',
        'document_start_page' => 'setDocumentStartPage',
        'match_percentage' => 'setMatchPercentage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'document_end_page' => 'getDocumentEndPage',
        'document_start_page' => 'getDocumentStartPage',
        'match_percentage' => 'getMatchPercentage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_end_page'] = isset($data['document_end_page']) ? $data['document_end_page'] : null;
        $this->container['document_start_page'] = isset($data['document_start_page']) ? $data['document_start_page'] : null;
        $this->container['match_percentage'] = isset($data['match_percentage']) ? $data['match_percentage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets document_end_page
     * @return string
     */
    public function getDocumentEndPage()
    {
        return $this->container['document_end_page'];
    }

    /**
     * Sets document_end_page
     * @param string $document_end_page 
     * @return $this
     */
    public function setDocumentEndPage($document_end_page)
    {
        $this->container['document_end_page'] = $document_end_page;

        return $this;
    }

    /**
     * Gets document_start_page
     * @return string
     */
    public function getDocumentStartPage()
    {
        return $this->container['document_start_page'];
    }

    /**
     * Sets document_start_page
     * @param string $document_start_page 
     * @return $this
     */
    public function setDocumentStartPage($document_start_page)
    {
        $this->container['document_start_page'] = $document_start_page;

        return $this;
    }

    /**
     * Gets match_percentage
     * @return string
     */
    public function getMatchPercentage()
    {
        return $this->container['match_percentage'];
    }

    /**
     * Sets match_percentage
     * @param string $match_percentage 
     * @return $this
     */
    public function setMatchPercentage($match_percentage)
    {
        $this->container['match_percentage'] = $match_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
    }
}


